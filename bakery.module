<?php

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\ParameterBag;
use Symfony\Component\HttpFoundation\Response;

/**
 * Implements hook_translated_menu_link_alter().
 */
function bakery_translated_menu_link_alter(&$item, $map) {
//  if ($item['href'] == 'bakery') {
//    $destination = drupal_get_destination();
//    $item['localized_options']['query'] = $destination;
//  }
}

/**
 * Implements hook_user_login().
 */
function bakery_user_login(UserInterface $account) {
  if (\Drupal::config('bakery.settings')->get('bakery_is_master') && $account->id()) {
    \Drupal::service('bakery.cookie_kitchen_subscriber')->bakeChocolateChipCookie(
      $account->getAccountName(), $account->getEmail(), _bakery_init_field($account->id())
    );
  }
}

/**
 * Implements hook_user_logout().
 */
function bakery_user_logout(\Drupal\Core\Session\AccountInterface $account) {
  $cookie = _bakery_validate_cookie(\Drupal::request()->cookies);

  // Only delete the SSO cookie if the name is the same in case there was an
  // existing session that's being logged out and SSO cookie is for new session.
  if ($account->id() && $cookie && $cookie['name'] === $account->getAccountName()) {
    \Drupal::service('bakery.cookie_kitchen_subscriber')->eatCookies('CHOCOLATECHIP');
  }

  // Destroy session cookie.
  \Drupal::service('bakery.cookie_kitchen_subscriber')->eatCookies(session_name());
}

/**
 * Implements hook_ENTITY_TYPE_presave() for user entities.
 */
function bakery_user_presave(UserInterface $account = NULL) {
  if (\Drupal::config('bakery.settings')->get('bakery_is_master')) {
    // Invoke implementations of hook_bakery_transmit() for syncing arbitrary
    // data.
    // @todo remove category and edit arguments from the d8 version of this hook.
    $_SESSION['bakery']['data'] = \Drupal::moduleHandler()->invokeAll('bakery_transmit', [[], $account, '']);

    // We store email/name if they changed. We want to wait with doing anything
    // else until the changes are saved locally.
    foreach (\Drupal::config('bakery.settings')->get('bakery_supported_fields') as $type => $enabled) {
      if ($enabled && isset($edit[$type]) && isset($account->$type) && $account->$type != $edit[$type]) {
        $_SESSION['bakery'][$type] = $edit[$type];
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for user entities.
 */
function bakery_user_update(UserInterface $account = NULL) {
  $user = \Drupal::currentUser();
  // We need to push changes.
  if (\Drupal::config('bakery.settings')->get('bakery_is_master') && isset($_SESSION['bakery'])) {
    $type = 'stroopwafel';
    $payload['data'] = serialize($_SESSION['bakery']);
    $payload['timestamp'] = $_SERVER['REQUEST_TIME'];
    $payload['uid'] = $account->id();
    // @todo not supported in Drupal 8.
    $payload['category'] = '';
    $payload['type'] = $type;
    $data = bakery_bake_data($payload);

    // Respond with encrypted and signed account information.
    unset($_SESSION['bakery']);

    $client = \Drupal::httpClient();
    // now update the slaves
    $slaves = \Drupal::config('bakery.settings')->get('bakery_slaves');
    foreach ($slaves as $slave) {
      try {
        $request = $client->post($slave . 'bakery/update', [
          'headers' => [
            'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
          ],
          'form_params' => [
            $type => $data,
          ],
        ]);

        if ($request->getStatusCode() != 200) {
          drupal_set_message(t('Error %error for site at %url', array(
            '%error' => $request->getStatusCode() . ' ' . $request->getReasonPhrase(),
            '%url' => $slave
          )));
        }
      }
      catch (\Exception $e) {
        drupal_set_message($e->getMessage());
        // TODO: Roll back the change.
      }
    }
    if ($user->id() === $account->id()) {
      // Rebake SSO cookie so user stays authenticated.
      $init = _bakery_init_field($account->id());
      _bakery_bake_chocolatechip_cookie($account->getAccountName(), $account->getEmail(), $init);
    }
  }
}

/**
 * Implements hook_user_view().
 */
function bakery_user_view(array $build, UserInterface $account, EntityViewDisplayInterface $display, $view_mode) {
  if (!\Drupal::config('bakery.settings')->get('bakery_is_master')) {
    $master = \Drupal::config('bakery.settings')->get('bakery_master');
    $init_url = _bakery_init_field_url($account->getInitialEmail());
    if (parse_url($master, PHP_URL_HOST) == parse_url($init_url, PHP_URL_HOST)) {
      $init_url = \Drupal\Core\Url::fromUri(substr($init_url, 0, strlen($init_url) - 5));
      $build['summary']['master_profile'] = [
        '#type' => 'user_profile_item',
        '#title' => t('Primary profile'),
        '#markup' => \Drupal::l(t('Profile on primary site'), $init_url), // Take everything up to '/edit'.
        '#access' => $account->hasPermission('access user profiles'),
      ];
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bakery_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
    case 'user_edit_form':
      if (!\Drupal::config('bakery.settings')->get('bakery_is_master') && !\Drupal::currentUser()->hasPermission('administer users')) {
        /** @var User $account */
        $account = $form['#user'];
        $init_url = _bakery_init_field_url($account->getInitialEmail());
        if (isset($form['account'])) {
          drupal_set_message(t('You can change the name, mail, and password <a href=":url">at the master site</a>.', [
            ':url' => UrlHelper::filterBadProtocol($init_url),
          ]), 'status', FALSE);
          $form['account']['#access'] = FALSE;
          $form['account']['name']['#access'] = FALSE;
          $form['account']['pass']['#access'] = FALSE;
          $form['account']['mail']['#access'] = FALSE;
        }

        foreach (\Drupal::config('bakery.settings')->get('bakery_supported_fields') as $type => $value) {
          if ($value) {
            switch($type) {
              case 'mail':
              case 'name':
                break;
              case 'picture':
                if (isset($form['picture'])) {
                  $form['picture']['picture_delete']['#access'] = FALSE;
                  $form['picture']['picture_upload']['#access'] = FALSE;
                  $form['picture']['#description'] = t('You can change the image <a href=":url">at the master site</a>.', [
                    ':url' => UrlHelper::filterBadProtocol($init_url),
                  ]);
                }
                break;
              case 'language':
                if (isset($form['locale'][$type])) {
                  $form['locale'][$type]['#disabled'] = TRUE;
                  $form['locale'][$type]['#description'] .= ' ' . t('You can change the language setting <a href=":url">at the master site</a>.', [
                    ':url' => UrlHelper::filterBadProtocol($init_url),
                  ]);
                }
                break;
              case 'signature':
                if (isset($form['signature_settings'][$type])) {
                  $form['signature_settings'][$type]['#disabled'] = TRUE;
                  $form['signature_settings'][$type]['#description'] .= ' ' . t('You can change the signature <a href=":url">at the master site</a>.', [
                    ':url' => UrlHelper::filterBadProtocol($init_url),
                  ]);
                }
                break;
              default:
                if (isset($form[$type])) {
                  $form[$type]['#disabled'] = TRUE;
                }
                if (isset($form[$type][$type])) {
                  $form[$type][$type]['#disabled'] = TRUE;
                  $form[$type][$type]['#description'] .= ' ' . t('You can change this setting <a href=":url">at the master site</a>.', [
                    ':url' => UrlHelper::filterBadProtocol($init_url)
                  ]);
                }
                break;
            }
          }
        }
      }
      break;
    case 'user_register_form':
      // Provide register ability on the slave sites.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_master')) {
        if (\Drupal::currentUser()->id()) {
          // Admin create user form. Add a note about account synchronization.
          $form['account']['bakery_help'] = array(
            '#markup' => t('<strong>Note:</strong> Only use this form to create accounts for users who exist on <a href=":url">@master</a> and not on this site. Be sure to use the exact same username and e-mail for the account here that they have on @master.', [
              ':url' => \Drupal::config('bakery.settings')->get('bakery_master'),
              '@master' => \Drupal::config('bakery.settings')->get('bakery_master')
            ]),
            '#weight' => -100,
          );
        }
        else {
          // Anonymous user registration form.
          // Populate fields if set from previous attempt.
          if (isset($_SESSION['bakery']['register'])) {
            $form['account']['name']['#default_value'] = $_SESSION['bakery']['register']['name'];
            $form['account']['mail']['#default_value'] = $_SESSION['bakery']['register']['mail'];
            unset($_SESSION['bakery']['register']);
          }
          // Replace the submit handler with our own.
          $form['#submit'] = array('_bakery_register_submit');
        }
      }
      break;
    case 'user_pass':
      // Slave sites need to make sure the local account exists, if the master
      // account exists.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_master')) {
        array_unshift($form['#validate'], '_bakery_pass_validate');
      }
      break;
    case 'user_pass_reset':
      // As part of the slave site registration we need to handle email
      // validation and password reset.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_master')) {
        // Set a submit handler for the psuedo-reset form.
        $form['#submit'] = array('_bakery_reset_submit');
        // Unset its custom action.
        unset($form['#action']);
      }
      break;
    case 'user_login_block':
    case 'user_login_form':
      // Provide login ability on the slave sites.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_master')) {
        // Replace validators from user module because they check the user
        // locally. We want to check if the account exists on the master
        // instead.
        $form['#validate'] = array_diff($form['#validate'], ['::validateName', '::validateAuthentication', '::validateFinal']);
        // Also replace the submit handler with our own to set a redirect cookie.
        $form['#submit'] = array('_bakery_login_submit');
      }
      break;
    default:
      break;
  }
}

/**
 * Validate handler for the password reset login.
 */
function _bakery_pass_validate(array $form, FormStateInterface $form_state) {
  // On a slave site it's possible that a user requests their password but
  // doesn't have an account on the slave site. So, we check if that's the case
  // and use our helpful functions to create their account on the slave site.
  $name = trim($form_state['values']['name']);

  $account = user_load_by_mail($name);
  if (!$account) {
    // No success, try to load by name.
    $account = user_load_by_name($name);
  }
  if (!$account) {
    // Attempt to copy account from master.
    bakery_request_account($name, TRUE);
  }
}

/**
 * Submit handler for the password reset form.
 */
function _bakery_reset_submit(array $form, FormStateInterface $form_state) {
  global $base_url;

  // If we're here it means the user has validated their email correctly.
  $master = \Drupal::config('bakery.settings')->get('bakery_master');
  // It's safe to use arg(2) here to load the user and log in because the
  // callback has validated the request and Drupal's Form API protects us
  // against forgery.
  /** @var User $account */
  $account = \Drupal::entityManager()->getStorage('user')->load(arg(2));
  // If they have not logged in before we need to update the master site.
  if ($account->getLastLoginTime() == 0) {
    $type = 'thinmint';
    $payload = [];
    $payload['name'] = $account->getAccountName();
    $payload['slave'] = rtrim($base_url, '/') . '/'; // Match how slaves are set on the master.
    $payload['uid'] = $account->id();
    $payload['timestamp'] = $_SERVER['REQUEST_TIME'];
    $payload['type'] = $type;
    $data = bakery_bake_data($payload);
    // Push validation to master.
    $client = \Drupal::httpClient();
    $request = $client->post($master . 'bakery/validate', [
      'headers' => [
        'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
      ],
      'form_params' => [
        $type => $data,
      ],
    ]);
  }

  // If they have logged in before or the master updated correctly, log them in.
  if ($account->getLastLoginTime() > 0 || (isset($request) && $request->getStatusCode() == 200)) {
    // Log the user in.
    $init = _bakery_init_field($account->id());
    _bakery_bake_chocolatechip_cookie($account->getAccountName(), $account->getEmail(), $init);
    user_login_finalize($account);
    // Inform them that they need to reset their password.
    drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password at <a href=":url">@master</a>.', [
      ':url' => UrlHelper::filterBadProtocol(_bakery_init_field_url($account->getInitialEmail())),
      '@master' => \Drupal::config('bakery.settings')->get('bakery_master'),
    ]));
    $form_state->setRedirect('entity.user.canonical', ['user' => $account->id()]);
  }
  else {
    $form_state->setRedirect('user.login');
  }
}

/**
 * Check if a form destination is set and save it in $data array.
 *
 * Used to preserve destination in Bakery redirection to master and slave
 * during login and registration.
 *
 * @see drupal_goto()
 *
 * @param $form
 *   Form definition to check.
 * @param $data
 *   Array to store the detected destination value, if any.
 */
function _bakery_save_destination_param($form, &$data) {
  // Hold on to destination if set.
  if (strpos($form['#action'], 'destination=') !== FALSE) {
    // If an absolute URL is in destination parse_url() will issue a warning
    // and not populate $url_args so no further protection is needed.
    parse_str(parse_url($form['#action'], PHP_URL_QUERY), $url_args);
    if (!empty($url_args['destination'])) {
      $data['destination'] = $url_args['destination'];
    }
  }
}

/**
 * Handle registration by redirecting to master.
 */
function _bakery_register_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Create an array of fields to send to the master. We need these four fields.
  $allowed = array('name', 'mail', 'pass', 'timezone');

  foreach ($form_state['values'] as $key => $value) {
    if (!in_array($key, $allowed)) {
      unset($form_state['values'][$key]);
    }
  }
  // Remove unneeded values.
  $form_state->cleanValues();
  // Save values to cookie.
  $data = $form_state['values'];
  _bakery_save_destination_param($form , $data);
  unset($_GET['destination']);

  // Store name and email in case of error and return from master.
  $_SESSION['bakery']['register'] = array(
    'name' => $data['name'],
    'mail' => $data['mail'],
  );
  // Create cookie and redirect to master.
  bakery_bake_oatmeal_cookie($data['name'], $data);
  drupal_goto(\Drupal::config('bakery.settings')->get('bakery_master') . 'bakery');
}

/**
 * Handle login by redirecting to master.
 */
function _bakery_login_submit($form, FormStateInterface $form_state) {
  // Get rid of all the values we don't explicitly know we want. While this may
  // break some modules it ensures we don't send sensitive data between sites.
  $allowed = ['name', 'pass', 'op'];
  $data = [];
  foreach ($form_state->getValues() as $key => $value) {
    if (in_array($key, $allowed)) {
      $data[$key] = $value;
    }
  }

  $request = Drupal::request();
  _bakery_save_destination_param($form , $data);
  $request->query->remove('destination');
  // Save query parameters to be available when user returns from master.
  $data['query'] = $request->query->all();

  // Create cookie and redirect to master.
  bakery_bake_oatmeal_cookie($data['name'], $data);
  $url = \Drupal::config('bakery.settings')->get('bakery_master') . '/bakery/login';
  // We need to override the normal redirect logic with a TrustedRedirect to
  // allow us to redirect to an external site.
  $form_state->setResponse(new TrustedRedirectResponse($url));
}

function bakery_register_return() {
}

function bakery_login() {
}

function bakery_login_return() {
}

/**
 * Encrypt and sign data for Bakery transfer.
 *
 * @param array $data
 *   Data to be transferred.
 * @return string Signed and encrypted data, url safe.
 */
function bakery_bake_data($data) {
  $key = \Drupal::config('bakery.settings')->get('bakery_key');
  $data = bakery_encrypt(serialize($data));
  $signature = hash_hmac('sha256', $data, $key);
  return base64_encode($signature . $data);
}

/**
 * Validate signature and decrypt data.
 *
 * @param string $data
 *   Bakery data, base64 encoded.
 * @param string $type
 *   (Optional) The type of data.
 *
 * @return string|FALSE
 *   Unserialized data or FALSE if invalid.
 */
function bakery_validate_data($data, $type = NULL) {
  $key = \Drupal::config('bakery.settings')->get('bakery_key');
  $data = base64_decode($data);
  $signature = substr($data, 0, 64);
  $encrypted_data = substr($data, 64);
  if ($signature !== hash_hmac('sha256', $encrypted_data, $key)) {
    return FALSE;
  }
  $decrypted_data = unserialize(bakery_decrypt($encrypted_data));
  // Prevent one cookie being used in place of another.
  if ($type !== NULL && $decrypted_data['type'] !== $type) {
    return FALSE;
  }
  // Allow cookies to expire when the browser closes.
  if (\Drupal::config('bakery.settings')->get('bakery_freshness') == 0
    || $decrypted_data['timestamp'] + \Drupal::config('bakery.settings')->get('bakery_freshness') >= $_SERVER['REQUEST_TIME']) {
    return $decrypted_data;
  }
  return FALSE;
}

/**
 * Name for cookie including session.cookie_secure and variable extension.
 *
 * @param string $type
 *   CHOCOLATECHIP or OATMEAL, default CHOCOLATECHIP
 * @return string
 *   The cookie name for this environment.
 */
function _bakery_cookie_name($type = 'CHOCOLATECHIP') {
  // Use different names for HTTPS and HTTP to prevent a cookie collision.
  if (ini_get('session.cookie_secure')) {
    if (\Drupal::config('bakery.settings')->get('bakery_loose_ssl')) {
      // Prefer SSL cookie if loose.
      if (isset($_COOKIE[$type . 'SSL'])) {
        $type .= 'SSL';
      }
    }
    else {
      // Always use SSL cookie if strict.
      $type .= 'SSL';
    }
  }
  // Allow installation to modify the cookie name.
  $extension = \Drupal::config('bakery.settings')->get('bakery_cookie_extension');
  $type .= $extension;
  return $type;
}

/**
 * Function to validate cookies
 *
 * @param \Symfony\Component\HttpFoundation\Request $request
 *   A request object containing the cookies to validate.
 * @param string $type
 *   CHOCOLATECHIP or OATMEAL, default CHOCOLATECHIP
 * @return bool
 *   Validated and decrypted cookie in an array, FALSE if invalid, or NULL
 */
function _bakery_validate_cookie(ParameterBag $cookies, $type = 'CHOCOLATECHIP') {
  $config = \Drupal::config('bakery.settings');
  $key = $config->get('bakery_key');

  $type = _bakery_cookie_name($type);
//  var_dump($cookies);
  if (!$cookies->has($type) || !$key || !$config->get('bakery_domain')) {
    // No cookie is set or site is misconfigured. Return NULL so existing
    // cookie is not deleted by bakery_eat_cookie().
    return NULL;
  }

  return bakery_validate_data($cookies->get($type), $type);
}

/**
 * Validate update request.
 */
function bakery_taste_stroopwafel_cookie() {
}

/**
 * Create a new cookie for identification
 */
function _bakery_bake_chocolatechip_cookie($name, $mail, $init) {
}

function bakery_taste_oatmeal_cookie() {
}

/**
 * Create a cookie for passing information between sites for registration and login.
 */
function bakery_bake_oatmeal_cookie($name, $data) {
  $key = \Drupal::config('bakery.settings')->get('bakery_key');
  if (!empty($key)) {
    global $base_url;
    $cookie = array(
      'data' => $data,
      'name' => $name,
      'calories' => 320,
      'timestamp' => $_SERVER['REQUEST_TIME'],
    );
    if (\Drupal::config('bakery.settings')->get('bakery_is_master')) {
      $cookie['master'] = 1;
    }
    else {
      $cookie['master'] = 0;
      $cookie['slave'] = $base_url . '/'; // Match the way slaves are set in Bakery settings, with ending slash.
    }
    $cookie_secure = !\Drupal::config('bakery.settings')->get('bakery_loose_ssl') && ini_get('session.cookie_secure');
    $type = _bakery_cookie_name('OATMEAL');
    $cookie['type'] = $type;
    $data = bakery_bake_data($cookie);
    // Allow cookies to expire when the browser closes.
    $expire = (\Drupal::config('bakery.settings')->get('bakery_freshness') > 0) ? $_SERVER['REQUEST_TIME'] + \Drupal::config('bakery.settings')->get('bakery_freshness') : '0';
    setcookie($type, $data, $expire, '/', \Drupal::config('bakery.settings')->get('bakery_domain'), (empty($cookie_secure) ? FALSE : TRUE), TRUE);
  }
}

function bakery_eat_stroopwafel_cookie() {
}

/**
 * Verify the validation request.
 */
function bakery_taste_thinmint_cookie() {
}

/**
 * Update the user's login time to reflect them validating their email address.
 */
function bakery_eat_thinmint_cookie() {
  // Session was set in validate.
  $name = $_SESSION['bakery']['name'];
  unset($_SESSION['bakery']['name']);
  $slave = $_SESSION['bakery']['slave'];
  unset($_SESSION['bakery']['slave']);
  $uid = $_SESSION['bakery']['uid'];
  unset($_SESSION['bakery']['uid']);

  $account = user_load_by_name($name);
  if ($account) {
    // @todo
    db_query("UPDATE {users} SET login = :login WHERE uid = :uid", array(':login' => $_SERVER['REQUEST_TIME'], ':uid' => $account->uid));

    // Save UID provided by slave site.
    _bakery_save_slave_uid($account, $slave, $uid);
  }
}

/**
 * Request account information from master to create account locally.
 *
 * @param string $name the username or e-mail to request information for to create.
 * @param boolean $or_email load account by name or email. Useful for getting
 *  account data from a password request where you get name or email.
 * @return The newly created local UID or FALSE.
 */
function bakery_request_account($name, $or_email = FALSE) {
  global $base_url;

  $existing_account = user_load_by_name($name);
  if (!$existing_account && $or_email) {
    $account = user_load_by_mail($name);
  }
  // We return FALSE in cases that the account already exists locally or if
  // there was an error along the way of requesting and creating it.
  if ($existing_account) {
    return FALSE;
  }
  $config = \Drupal::config('bakery.settings');

  $master = $config->get('bakery_master');

  // Save a stub account so we have a slave UID to send.
  $account = User::create([
    'name' => $name,
    'pass' => user_password(),
    'status' => 1,
    'init' => 'bakery_temp/' . mt_rand(),
  ]);

  if (!$account) {
    \Drupal::logger('bakery')->error('Unable to create stub account for @name', array('@name' => $name));
    return FALSE;
  }

  $type = 'gingerbread';
  $data = bakery_bake_data([
    'name' => $name,
    'or_email' => $or_email,
    'slave' => rtrim($base_url, '/') . '/', // Match how slaves are set on the master.
    'uid' => $account->id(),
    'timestamp' => $_SERVER['REQUEST_TIME'],
    'type' => $type,
  ]);

  // Make request to master for account information.
  $client = \Drupal::httpClient();
  try {
    $request = $client->post($master . '/bakery/create', [
      'headers' => [
        'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
      ],
      'form_params' => [
        $type => $data,
      ],
    ]);
  }
  catch (\GuzzleHttp\Exception\RequestException $e) {
    \Drupal::logger('bakery')
      ->error('Received response !code from master with message @message', [
        '@code' => $e->getResponse()->getStatusCode(),
        '@message' => $e->getResponse()->getReasonPhrase(),
      ]);
    $account->delete();
    return FALSE;
  }

  if (($cookie = bakery_validate_data($request->getBody())) === FALSE) {
    // Invalid response.
    \Drupal::logger('bakery')->error('Invalid response from master when attempting to create local account for @name', ['@name' => $name]);
    $account->delete();
    return FALSE;
  }

  $account->setUsername($cookie['name']);
  $account->setPassword(user_password());
  $account->setEmail($cookie['mail']);
  $account->set('init', _bakery_init_field($cookie['uid']));

  // Add any supported sync fields.
  foreach ($config->get('bakery_supported_fields') as $type => $enabled) {
    if ($enabled && isset($cookie[$type])) {
      // @todo don't know how this should work.
//      $account->set($type, $cookie[$type]);
    }
  }
  $account->save();

  if ($account) {
    \Drupal::logger('bakery')->notice('Created account for @name', array('@name' => $name));
    // Invoke hook_bakery_receive().
    \Drupal::moduleHandler()->invokeAll('bakery_receive', [$account, $cookie]);
    return $account->id();
  }

  \Drupal::logger('bakery')->error('Unable to create account for @name', array('@name' => $name));
  $account->delete();
  return FALSE;
}

/**
 * Destroy unwanted cookies
 */
function _bakery_eat_cookie(Response $response, $type = 'CHOCOLATECHIP') {
  $type = _bakery_cookie_name($type);
  $response->headers->clearCookie($type, '/', '');
  $response->headers->clearCookie($type, '/', \Drupal::config('bakery.settings')->get('bakery_domain'));
}

/**
 * Build internal init url (without scheme).
 */
function _bakery_init_field($uid) {
  $url = \Drupal::config('bakery.settings')->get('bakery_master');
  $scheme = parse_url($url, PHP_URL_SCHEME);
  return str_replace($scheme . '://', '', $url) . '/user/' . $uid . '/edit';
}

/**
 * Build full init url to master.
 */
function _bakery_init_field_url($init) {
  $scheme = parse_url(\Drupal::config('bakery.settings')->get('bakery_master'), PHP_URL_SCHEME);
  return $scheme . '://'. $init;
}

/**
 * Encryption handler.
 *
 * @param $text, The text to be encrypted.
 *
 * @return string Encrypted text.
 */
function bakery_encrypt($text) {
  $key = \Drupal::config('bakery.settings')->get('bakery_key');

  $td = mcrypt_module_open('rijndael-128', '', 'ecb', '');
  $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);

  $key = substr($key, 0, mcrypt_enc_get_key_size($td));

  mcrypt_generic_init($td, $key, $iv);

  $data = mcrypt_generic($td, $text);

  mcrypt_generic_deinit($td);
  mcrypt_module_close($td);

  return $data;
}

/**
 * Decryption handler.
 *
 * @param $text, The data to be decrypted.
 *
 * @return string Decrypted text.
 */
function bakery_decrypt($text) {
  $key = \Drupal::config('bakery.settings')->get('bakery_key');

  $td = mcrypt_module_open('rijndael-128', '', 'ecb', '');
  $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);

  $key = substr($key, 0, mcrypt_enc_get_key_size($td));

  mcrypt_generic_init($td, $key, $iv);

  $data = mdecrypt_generic($td, $text);

  mcrypt_generic_deinit($td);
  mcrypt_module_close($td);

  return $data;
}

/**
 * Perform standard Drupal login operations for a user object.
 *
 * The user object must already be authenticated. This function verifies
 * that the user account is not blocked/denied and then performs the login,
 * updates the login timestamp in the database, invokes hook_user('login'),
 * and regenerates the session.
 *
 * @param $account
 *    An authenticated user object to be set as the currently logged
 *    in user.
 * @param $edit
 *    The array of form values submitted by the user, if any.
 *    This array is passed to hook_user op login.
 * @return boolean
 *    TRUE if the login succeeds, FALSE otherwise.
 */
function bakery_user_external_login($account, $edit = array()) {
  // @todo validate user isn't blocked.
  user_login_finalize($account);
  return TRUE;
}

/**
 * Custom logout function modified from user_logout.
 */
function _bakery_user_logout() {
  \Drupal::service('bakery.cookie_kitchen_subscriber')
    ->eatCookies('CHOCOLATECHIP');
  user_logout();
  // @todo replace "pass along query arguments" and "cache buster" code.
  return $this->redirect('<front>');
}

function bakery_uncrumble_access() {
}

/**
 * Form to let users repair minor problems themselves.
 */
function bakery_uncrumble($form, &$form_state) {
}

/**
 * Validation for bakery_uncrumble form.
 */
function bakery_uncrumble_validate($form, &$form_state) {
  // Have to include password.inc for user_check_password().
  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// require_once \Drupal::root() . '/' . variable_get('password_inc', 'includes/password.inc');

  // We are ignoring blocked status on purpose. The user is being repaired, not logged in.
  $account = user_load_by_name($form_state['values']['name']);
  if (!($account && $account->uid) || !user_check_password($form_state['values']['pass'], $account)) {
    \Drupal::logger('bakery')->notice('Login attempt failed for %user while running uncrumble.', array('%user' => $form_state['values']['name']));
    // Can't pretend that it was the "username or password" so let's be helpful instead.
    // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// form_set_error('pass', t('Sorry, unrecognized password. If you have forgotten your %site password, please <a href="@contact">contact the site administrator.</a>', array('%site' => variable_get('site_name', 'Drupal'), '@contact' => variable_get('bakery_master', 'http://drupal.org/') .'contact')));

  }
  else {
    $form_state['bakery_uncrumble_account'] = $account;
  }
}

function bakery_uncrumble_submit($form, &$form_state) {
  $account = $form_state['bakery_uncrumble_account'];
  unset($form_state['bakery_uncrumble_account']);
  $cookie = _bakery_validate_cookie();
  db_update('users')->fields(array('init' => $cookie['init']))
    ->condition('uid', $account->uid, '=')
    ->execute();
  \Drupal::logger('bakery')->notice('uncrumble changed init field for uid %uid from %oldinit to %newinit', array('%oldinit' => $account->init, '%newinit' => $cookie['init'], '%uid' => $account->uid));
  // @FIXME
// user_save() is now a method of the user entity.
// user_save($account, array('name' => $cookie['name'], 'mail' => $cookie['mail']));

  \Drupal::logger('bakery')->notice('uncrumble updated name %name_old to %name_new, mail %mail_old to %mail_new on uid %uid.', array('%name_old' => $account->name, '%name_new' => $cookie['name'], '%mail_old' => $account->mail, '%mail_new' => $cookie['mail'], '%uid' => $account->uid));
  drupal_set_message(t('Your account has been repaired.'));
  $form_state['redirect'] = 'user';
}

/**
 * Save UID provided by a slave site. Should only be used on the master site.
 *
 * @param \Drupal\user\Entity\user $account
 *   A local user object.
 * @param $slave
 *   The URL of the slave site.
 * @param $slave_uid
 *   The corresponding UID on the slave site.
 */
function _bakery_save_slave_uid(User $account, $slave, $slave_uid) {
  $config = \Drupal::config('bakery.settings');
  $database = \Drupal::database();
  $slave_user_exists = $database->queryRange("SELECT 1 FROM {bakery_user} WHERE uid = :uid AND slave = :slave", 0, 1, [
    ':uid' => $account->id(),
    ':slave' => $slave,
  ])->fetchField();
  if ($config->get('bakery_is_master') && !empty($slave_uid) && in_array($slave, $config->get('bakery_slaves')) && !$slave_user_exists) {
    $database->insert('bakery_user')->fields([
      'uid' => $account->id(),
      'slave' => $slave,
      'slave_uid' => $slave_uid,
    ])->execute();
  }
}

/**
 * Form for admins to pull accounts.
 */
function bakery_pull_form($form, &$form_state) {

  $form['or_email'] = array(
    '#type' => 'radios',
    '#options' => array(
      0 => t('Username'),
      1 => t('Username or email'),
    ),
    '#default_value' => 0,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Request account'),
  );

  return $form;
}

/**
 * Make sure we are not trying to request an existing user.
 */
function bakery_pull_form_validate($form, &$form_state) {
  $existing_account = user_load_by_name($form_state['values']['name']);
  if (!$existing_account && $form_state['values']['or_email']) {
    $existing_account = user_load_by_mail($form_state['values']['name']);
  }
  // Raise an error in case the account already exists locally.
  if ($existing_account) {
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
//
//
// @see https://www.drupal.org/node/2195739
// form_set_error('name', t('Account !link exists.', array('!link' => theme('username', array('account' => $existing_account)))));

  }
}

/**
 * If the request succeeds, go to the user page. Otherwise, show an error.
 */
function bakery_pull_form_submit($form, &$form_state) {
  $result = bakery_request_account($form_state['values']['name'], $form_state['values']['or_email']);
  if ($result === FALSE) {
    drupal_set_message(t("Pulling account %name failed: maybe there is a typo or they don't exist on the master site.", array('%name' => $form_state['values']['name'])), 'error');
  }
  else {
    $form_state['redirect'] = 'user/' . $result;
  }
}
